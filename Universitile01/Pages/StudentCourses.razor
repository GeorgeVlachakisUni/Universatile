@page "/Studentcourses"
@using MudBlazor
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider
@layout AdminLayout
@*StartedEditingItem="@StartedEditingCourses" CanceledEditingItem="@CanceledEditingCourses" CommittedItemChanges="@CommittedItemChanges"*@
<MudDataGrid T="StudentstoCourse" Items="@Studentsf" ReadOnly="false" EditMode="@(_isCellEditMode ? MudBlazor.DataGridEditMode.Cell : MudBlazor.DataGridEditMode.Form)"
             Bordered="true" Dense="true" EditTrigger="@(true ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.FirstName" Title="First Name" IsEditable="false" />
        <PropertyColumn Property="x => x.LastName" Title="Last Name" IsEditable="false" />
        <PropertyColumn Property="x => x.CourseId" Title="Belongs in Course" IsEditable="true">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.CourseId" Immediate="true" Required RequiredError="You must select a Position!!!">
                    @foreach (Course coursed in Courses)
                    {
                        <MudSelectItem Value="coursed.CourseName"></MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn Hidden="@(false)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => Delete(@context.Item))" />
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => Save(@context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {
    private string connectionString = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";
    private List<PersonalInfo> Students = new List<PersonalInfo>();
    private List<StudentstoCourse> Studentsf = new List<StudentstoCourse>();
    private List<Course> Courses = new List<Course>();
    public static PersonalInfo pers;
    private bool _editTriggerRowClick;
    private bool _isCellEditMode;
    private bool _readOnly;
    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {

        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlstudents = "SELECT ur.* FROM personal_info ur JOIN aspnetusers k ON ur.aspnetusers_Id = k.Id JOIN aspnetuserroles u On k.Id = u.UserId WHERE u.RoleId = '" + "9a2104f0-43b7-4cdc-b125-f667fc272be7" + "'";
        using (MySqlCommand command = new MySqlCommand(sqlstudents, connection))
        {

            try
            {
                connection.Open();
                MySqlCommand sqlcmd = new MySqlCommand(sqlstudents, connection);
                sqlcmd.CommandText = sqlstudents;
                sqlcmd.CommandType = CommandType.Text;
                MySqlDataReader rdr = sqlcmd.ExecuteReader();
                while (rdr.Read())
                {
                    PersonalInfo stud = new PersonalInfo();
                    stud.FirstName = rdr["first_name"].ToString();
                    stud.LastName = rdr["last_name"].ToString();
                    stud.AspnetusersId = rdr["aspnetusers_Id"].ToString();



                    StudentstoCourse pers = new StudentstoCourse();
                    pers.FirstName = stud.FirstName;
                    pers.LastName = stud.LastName;
                    pers.Id = stud.AspnetusersId;
                    Studentsf.Add(pers);


                }
                // always call Close when done reading.
                rdr.Close();
                // Close the connection when done with it.
                connection.Close();
            }

            catch
            {
                throw;
            }
        }
        string coursessql = "SELECT * FROM courses";
        using (MySqlCommand command = new MySqlCommand(coursessql, connection))
        {

            try
            {
                connection.Open();
                MySqlCommand sqlcmd = new MySqlCommand(coursessql, connection);
                sqlcmd.CommandText = coursessql;
                sqlcmd.CommandType = CommandType.Text;
                MySqlDataReader rdr = sqlcmd.ExecuteReader();
                while (rdr.Read())
                {
                    Course mod = new Course();
                    mod.CourseId = (Int32)rdr["course_id"];
                    mod.CourseName = rdr["course_name"].ToString();
                    mod.CourseDescription = rdr["course_description"].ToString();
                    mod.CourseDuration = (Int32)rdr["course_duration"];
                    Courses.Add(mod);

                }
                // always call Close when done reading.
                rdr.Close();
                // Close the connection when done with it.
                connection.Close();
            }
            catch
            {
                throw;
            }
        }
    }

    void StartedEditingCourses(PersonalInfo pers)
    {
        try
        {
            _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(pers)}");
        }
        catch
        {
            throw;
        }
    }

    void CanceledEditingCourses(PersonalInfo pers)
    {
        try
        {
            _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(pers)}");
        }
        catch
        {
            throw;
        }
    }


    async Task CommittedItemChanges(PersonalInfo pers)
    {
        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlfindcId = "SELECT course_id FROM courses WHERE course_name = '" + pers.FirstName+ "'";
        string courseid = "";
        using (MySqlCommand command = new MySqlCommand(sqlfindcId, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(sqlfindcId, connection);
            sqlcmd.CommandText = sqlfindcId;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                courseid = rdr["course_id"].ToString();
            }
        }
    }
    void Delete(StudentstoCourse pers)
    {
        try
        {
            MySqlConnection connection = new MySqlConnection(connectionString);
            string sql = "DELETE FROM aspnetusers WHERE Id = @Id";
            using (MySqlCommand command = new MySqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", pers.Id);
                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
            Studentsf.Remove(pers);
        }
        catch
        {
            throw;
        }
    }

    void Save(StudentstoCourse pers, Course mod)
    {
        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlfindcId = "SELECT course_id FROM courses WHERE course_name = '" + mod.CourseName + "'";
        string courseid = "";
        using (MySqlCommand command = new MySqlCommand(sqlfindcId, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(sqlfindcId, connection);
            sqlcmd.CommandText = sqlfindcId;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                courseid = rdr["course_id"].ToString();
            }
        }
        connection.Close();
        try
        {
            string sql = "INSERT INTO students (aspnetusers_Id, courses_course_id) VALUES (@Id, @CourseId)";
            using (MySqlCommand command = new MySqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", pers.Id);
                command.Parameters.AddWithValue("@CourseId", courseid);

                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
        }
        catch
        {
            throw;
        }
    }

    public class StudentstoCourse
    {
        public string Id { get; set; }

        public string Role { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string? MiddleName { get; set; }

        public string? CourseName { get; set; }

        public string? CourseId { get; set; }

    }

}


