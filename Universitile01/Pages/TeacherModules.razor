@page "/TeacherModules"
@using MudBlazor
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider
@layout AdminLayout

<MudDataGrid T="TeacherstoModules" Items="@Teacherssf" ReadOnly="false" EditMode="@(_isCellEditMode ? MudBlazor.DataGridEditMode.Cell : MudBlazor.DataGridEditMode.Form)"
             Bordered="true" Dense="true" EditTrigger="@(true ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.ModuleName" Title="Module Name" IsEditable="false" />
        <PropertyColumn Property="x => x.CourseName.CourseName" Title="Belongs in Course" IsEditable="false" />
        <PropertyColumn Property="x => x.FullName" Title="Teacher Name" IsEditable="true">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.FullName" Immediate="true" Required RequiredError="You must select a Position!!!">
                    @foreach (Teacher teaches in Teach)
                    {
                        <MudSelectItem Value="teaches.FullName"></MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn Hidden="@(false)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => Delete(@context.Item))" />
                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => Save(@context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code{
    private string connectionString = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";
    private List<PersonalInfo> Students = new List<PersonalInfo>();
    private List<TeacherstoModules> Teacherssf = new List<TeacherstoModules>();
    private List<Course> Courses = new List<Course>();
    private List<Teacher> Teach = new List<Teacher>();
    public static PersonalInfo pers;
    private bool _editTriggerRowClick;
    private bool _isCellEditMode;
    private bool _readOnly;
    private List<string> _events = new();
    private List<string> aspnetusersid = new List<string>();

    protected override async Task OnInitializedAsync()
    {

        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlstudents = "SELECT m.module_id, m.module_name, c.course_name FROM modules m JOIN courses c ON m.courses_course_id = c.course_id WHERE NOT EXISTS (  SELECT 1 FROM teachers t WHERE t.modules_module_id = m.module_id)";
        using (MySqlCommand command = new MySqlCommand(sqlstudents, connection))
        {

            try
            {
                connection.Open();
                MySqlCommand sqlcmd = new MySqlCommand(sqlstudents, connection);
                sqlcmd.CommandText = sqlstudents;
                sqlcmd.CommandType = CommandType.Text;
                MySqlDataReader rdr = sqlcmd.ExecuteReader();
                while (rdr.Read())
                {

                    TeacherstoModules mod = new TeacherstoModules();
                    mod.ModuleId = (Int32)rdr["module_id"];
                    mod.ModuleName = rdr["module_name"].ToString();
                    mod.CourseName = new Course { CourseName = rdr["course_name"].ToString()};
                    Teacherssf.Add(mod);

                }
                // always call Close when done reading.
                rdr.Close();
                // Close the connection when done with it.
                connection.Close();
            }

            catch
            {
                throw;
            }
        }
        foreach (string a in aspnetusersid)
        {
            string noncoursestudents = "SELECT * FROM personal_info WHERE aspnetusers_Id ='" + a + "'";

            using (MySqlCommand command = new MySqlCommand(noncoursestudents, connection))
            {

                try
                {
                    connection.Open();
                    MySqlCommand sqlcmd = new MySqlCommand(noncoursestudents, connection);
                    sqlcmd.CommandText = noncoursestudents;
                    sqlcmd.CommandType = CommandType.Text;
                    MySqlDataReader rdr = sqlcmd.ExecuteReader();
                    while (rdr.Read())
                    {
                        TeacherstoModules mod = new TeacherstoModules();
                        mod.Id = a;
                        mod.FirstName = rdr["first_name"].ToString();
                        mod.LastName = rdr["last_name"].ToString();
                        Teacherssf.Add(mod);

                    }
                    // always call Close when done reading.
                    rdr.Close();
                    // Close the connection when done with it.
                    connection.Close();
                }
                catch
                {
                    throw;
                }
            }
        }
        string coursessql = "SELECT * FROM courses";
        using (MySqlCommand command = new MySqlCommand(coursessql, connection))
        {

            try
            {
                connection.Open();
                MySqlCommand sqlcmd = new MySqlCommand(coursessql, connection);
                sqlcmd.CommandText = coursessql;
                sqlcmd.CommandType = CommandType.Text;
                MySqlDataReader rdr = sqlcmd.ExecuteReader();
                while (rdr.Read())
                {


                }
                // always call Close when done reading.
                rdr.Close();
                // Close the connection when done with it.
                connection.Close();
            }
            catch
            {
                throw;
            }
        }
    }



    void Delete(TeacherstoModules pers)
    {
        try
        {
            MySqlConnection connection = new MySqlConnection(connectionString);
            string sql = "DELETE FROM aspnetusers WHERE Id = @Id";
            using (MySqlCommand command = new MySqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", pers.Id);
                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
            Teacherssf.Remove(pers);
        }
        catch
        {
            throw;
        }
    }

    void Save(TeacherstoModules pers)
    {
        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlfindcId = "SELECT course_id FROM courses WHERE course_name = '" + pers.ModuleName + "'";
        using (MySqlCommand command = new MySqlCommand(sqlfindcId, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(sqlfindcId, connection);
            sqlcmd.CommandText = sqlfindcId;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                //pers.ModuleId = rdr["course_id"].ToString();
            }
            rdr.Close();
            connection.Close();

        }

        try
        {
            string sql = "INSERT INTO students (aspnetusers_Id, courses_course_id) VALUES (@Id, @CourseId)";
            using (MySqlCommand command = new MySqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", pers.Id);
                command.Parameters.AddWithValue("@CourseId", pers.ModuleId);

                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
        }
        catch
        {
            throw;
        }
    }

    public class TeacherstoModules
    {
        public string Id { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string? ModuleName { get; set; }

        public int ModuleId { get; set; }

        public virtual Course CourseName { get; set; }

        public string FullName = "{FirstName} " + "{LastName}";
    }

    public class Teacher
    {
        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string FullName = "{FirstName} " + "{LastName}";
    }
}