@page "/AdminAnnouncements"
@using MudBlazor
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider
@layout AdminLayout


<h3>AdminAnnouncements</h3>

<MudDataGrid T="CreateAnnouncement" Items="@Announcements" ReadOnly="false" EditMode="@(_isCellEditMode ? MudBlazor.DataGridEditMode.Cell : MudBlazor.DataGridEditMode.Form)"
             Bordered="true" Dense="true" EditTrigger="@(true ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.Message" Title="Message" IsEditable="true" />
        <PropertyColumn Property="x => x.Importance" Title="Importance" IsEditable="true" />
        <PropertyColumn Property="x => x.today" Title="Date" IsEditable="false" />
    
       <TemplateColumn Hidden="@(false)" CellClass="d-flex justify-end">
        <CellTemplate>
            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => Delete(@context.Item))" />
            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Save" OnClick="@(() => Save(@context.Item))" />
        </CellTemplate>
    </TemplateColumn>
    </Columns>
</MudDataGrid>
<MudButton OnClick="@AddEmptyRow" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>



@code {
    private bool _isCellEditMode;
    new List<CreateAnnouncement> Announcements = new List<CreateAnnouncement>();
    private string connectionString = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";

    protected override async Task OnInitializedAsync()
    {
        MySqlConnection connection = new MySqlConnection(connectionString);
        string annsql = "SELECT * FROM announcements";
        using (MySqlCommand command = new MySqlCommand(annsql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(annsql, connection);
            sqlcmd.CommandText = annsql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                CreateAnnouncement mod = new CreateAnnouncement(); 
                if ((Boolean)rdr["Importance"])
                {
                    mod.Importance = "true";
                }
                else mod.Importance = "false";
                mod.Message = rdr["Message"].ToString();
                mod.today = (DateTime)rdr["date"];
                mod.Id = (Int32)rdr["announcements_id"];
                Announcements.Add(mod);

            }
            rdr.Close();
            connection.Close();

        }
    }

    void Delete(CreateAnnouncement ann)
    {
        try
        {
            MySqlConnection connection = new MySqlConnection(connectionString);
            string sql = "DELETE FROM announcements WHERE announcements_id = @Id";
            using (MySqlCommand command = new MySqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", ann.Id);
                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
                Announcements.Remove(ann);

        }
        catch
        {
            throw;
        }
    }

    void Save(CreateAnnouncement ann)
    {
        MySqlConnection connection = new MySqlConnection(connectionString);
        string sqlfindcId = "INSERT INTO announcements (date, Message, Importance) VALUES (@date, @msg , @importance)";
        using (MySqlCommand command = new MySqlCommand(sqlfindcId, connection))
        {
            try
            {
                command.Parameters.AddWithValue("@date", ann.today);
                command.Parameters.AddWithValue("@msg", ann.Message);
                if (ann.Importance == "true")
                {
                    command.Parameters.AddWithValue("@importance", true);
                }
                else
                {
                    command.Parameters.AddWithValue("@importance", false);
                }
                connection.Close();
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
            }
            catch
            {
                //probably int isnt 0-1    
            }
        }
    }
    async Task AddEmptyRow()
    {
        CreateAnnouncement mod = new CreateAnnouncement()
            {
                today = DateTime.Now,
                Message = "",
                Importance = "false",
            };
        Announcements.Add(mod);
    }

    public class CreateAnnouncement
    {
        public int? Id { get; set; }
        public DateTime? today { get; set; }
        public string? Message { get; set; }
        public string? Importance { get; set; }
    }

}
