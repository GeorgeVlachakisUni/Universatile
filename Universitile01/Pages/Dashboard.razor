@page "/Dashboard"
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>Dashboard</PageTitle>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300i,400" rel="stylesheet">
</head>

<body>

    <div class="row">
        <AuthorizeView>
            <Authorized>
                <div class="col-8">
                    <RadzenScheduler Data="@events" TItem="CalendarEvent" StartProperty="DateStart" EndProperty="DateEnd" TextProperty="Tittle" AppointmentSelect=@OpenDialogCalendar>
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                        <RadzenYearView />
                    </RadzenScheduler>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <div class="col-4" style="color: white">
                    <MudCarousel Class="mud-width-full" @ref="_carouselmodules" ItemsSource="@myModules" @bind-SelectedIndex="selectedIndexModule" Style="height:400px; background-color:#12080c; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
                        <ItemTemplate>
                            <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                                <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#12080c">
                                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                                        <RadzenStack Gap="0" Style="align-self:center">
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Module</b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Body1"><b>@myContext.ModuleName</b></RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
                                        <RadzenRow RowGap="0">
                                            <RadzenColumn SizeXS="8">
                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">School</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Direction</RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn SizeXS="4">
                                                <RadzenButton Variant="Radzen.Variant.Text" Text="Go to module's page'" Size="ButtonSize.Medium" />
                                            </RadzenColumn>
                                        </RadzenRow>
                                    </RadzenCard>
                                    <br />
                                    <br />
                                </RadzenCard>
                            </div>
                        </ItemTemplate>
                    </MudCarousel>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="row">
        <AuthorizeView>
            <Authorized>
				<div class="col-8" style="color:white">
					<RadzenDataList WrapItems="false" AllowPaging="false" Data="@announcements" Count="@announcements.Count()" TItem="Announcement" Style="height:400px; overflow-y:scroll;">
						<Template Context="announcement">
							<MudCard Style="background-color:#13181b; color:aliceblue">
								<MudCardContent>
									@if (announcement.Importance)
									{
										<MudBadge Dot="false" Color="Color.Error" Icon="@Icons.Material.TwoTone.ErrorOutline" Class="my-auto" Origin="Origin.TopLeft" Visible="@(!announcement.UsersHasAnnouncements.Any(u => u.IsRead[0] == 1))">
											<MudText><b>@announcement.Message</b></MudText>
										</MudBadge>
									}
									else
									{
										<MudBadge Dot="true" Color="Color.Success" Class="my-auto" Origin="Origin.TopLeft" Visible="@(!announcement.UsersHasAnnouncements.Any(u => u.IsRead[0] == 1))">
											<MudText><b>@announcement.Message</b></MudText>
										</MudBadge>
									}
									@*<MudText Typo="Typo.body2">@announcement.Message</MudText>*@
								</MudCardContent>
							</MudCard>
						</Template>
					</RadzenDataList>
				</div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
				<div class="col-4" style="color: white">
					<MudCarousel Class="mud-width-full" @ref="_carouselTeachers" ItemsSource="@_sourceTeachers" @bind-SelectedIndex="selectedIndexTeachers" Style="height:400px; background-color:#000901; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
						<ItemTemplate>
							<div class="d-flex flex-column flex-column justify-center" style="height:100%">
								<RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#000901">
									<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
										<MudAvatar Style="height:100px; width:100px">@myContext.FirstName.First()@myContext.LastName.First()</MudAvatar>
										<RadzenStack Gap="0" Style="align-self:center">
											<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Teacher</b></RadzenText>
											<RadzenText TextStyle="TextStyle.Body1"><b>@myContext.FirstName @myContext.LastName</b></RadzenText>
											@*<RadzenText TextStyle="TextStyle.Body2">@myContext.Department</RadzenText>*@
										</RadzenStack>
									</RadzenStack>
									<RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
										<RadzenRow RowGap="0">
											<RadzenColumn SizeXS="8">
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Email</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1" style="color:dodgerblue">@myContext.Aspnetusers.Email</RadzenText>*@
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Modules</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1">@myContext.Modules</RadzenText>*@
											</RadzenColumn>
											<RadzenColumn SizeXS="4">
												<RadzenButton Variant="Radzen.Variant.Text" Text="Email" Size="ButtonSize.Small" />
												<RadzenButton Variant="Radzen.Variant.Text" Text="Live Chat" Size="ButtonSize.Small" />
											</RadzenColumn>
										</RadzenRow>
									</RadzenCard>
									<br />
									<br />
								</RadzenCard>
							</div>
						</ItemTemplate>
					</MudCarousel>
				</div>
            </Authorized>
        </AuthorizeView>
    </div>

</body>

@code {
    private string userId;
    private List<CalendarEvent> events = new List<CalendarEvent>();
    private List<Module> modules = new List<Module>();
    private int selectedIndexModule;
    private MudCarousel<Module> _carouselmodules;
    private List<PerosnalInfo> _sourceTeachers;
    private MudCarousel<PerosnalInfo> _carouselTeachers;
    private int selectedIndexTeachers = 0;
    private List<Announcement> announcements = new List<Announcement>();
    private List<Module> myModules = new List<Module>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private void OpenDialogCalendar(SchedulerAppointmentSelectEventArgs<CalendarEvent> args)
    {

    }


    protected override async Task OnInitializedAsync()
    {
        var userId = getUserId();
        events = await Db.CalendarEvents.ToListAsync();
        modules = await Db.Modules.ToListAsync();
        _sourceTeachers = TeacherService.GetAllTeachers();
        announcements = await Db.Announcements
            .Include(a => a.UsersHasAnnouncements)
            .Where(a => a.UsersHasAnnouncements.Any(u => u.AspnetusersId == userId.ToString()))
            .ToListAsync();
        async Task<string> getUserName()
        {
            var user = (await authenticationStateTask).User;
            return user.Identity.Name;
        }
        async Task<string> getUserId()
        {
            var user = (await authenticationStateTask).User;
            var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            return userid;
        }
        MySqlConnection connection = new MySqlConnection("Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2");
        string sql = "SELECT m.* FROM modules m INNER JOIN students s ON m.module_id = s.modules_module_id INNER JOIN aspnetusers u ON s.aspnetusers_Id = u.Id WHERE u.Id ='" + userId.Result.ToString() + "'";
        using (MySqlCommand command = new MySqlCommand(sql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(sql, connection);
            sqlcmd.CommandText = sql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
                myModules.Add(mod);
            }
            // always call Close when done reading.
            rdr.Close();
            // Close the connection when done with it.
            connection.Close();
        }
    }

}