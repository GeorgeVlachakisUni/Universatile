@page "/Dashboard"
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject ApplicationDbContext Db
@inject IAnnouncementService AnnouncementService
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore


<PageTitle>Dashboard</PageTitle>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300i,400" rel="stylesheet">
</head>

<body>
    <AuthorizeView>
        <Authorized>
            <div class="row">
                <div class="col-8">
                    <RadzenScheduler Data="@events" TItem="CalendarEvent" StartProperty="DateStart" EndProperty="DateEnd" TextProperty="Title" AppointmentSelect=@OpenDialogCalendar>
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                        <RadzenYearView />
                    </RadzenScheduler>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</body>

@code {
    private List<CalendarEvent> events = new List<CalendarEvent>();
    private List<Module> modules = new List<Module>();
    private int selectedIndexModule;
    private MudCarousel<Module> _carouselmodules;
    private List<Announcement> announcements = new List<Announcement>();
    private List<UsersHasAnnouncement> usersHasAnnouncements = new List<UsersHasAnnouncement>();
    private List<PerosnalInfo> _sourceTeachers;
    private MudCarousel<PerosnalInfo> _carouselTeachers;
    private int selectedIndexTeachers = 0;





    protected override async Task OnInitializedAsync()
    {
        events = await Db.CalendarEvents.ToListAsync();
        modules = await Db.Modules.ToListAsync();
        announcements = AnnouncementService.GetAllAnnouncements();
        _sourceTeachers = TeacherService.GetAllTeachers();
        
       
    }



    private void OpenDialogCalendar(SchedulerAppointmentSelectEventArgs<CalendarEvent> args)
    {
        
    }
}

       <div class="col-4" style="color: white">
    <MudCarousel Class="mud-width-full" @ref="_carouselmodules" ItemsSource="@modules" @bind-SelectedIndex="selectedIndexModule" Style="height:400px; background-color:#12080c; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
        <ItemTemplate>
            <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#12080c">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                        <RadzenStack Gap="0" Style="align-self:center">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Module</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@myContext.ModuleName</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
                        <RadzenRow RowGap="0">
                            <RadzenColumn SizeXS="8">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">School</RadzenText>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Direction</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn SizeXS="4">
                                <RadzenButton Variant="Radzen.Variant.Text" Text="Go to module's page'" Size="ButtonSize.Medium"/>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                    <br />
                    <br />
                </RadzenCard>
            </div>
        </ItemTemplate>
    </MudCarousel>
</div>

           @code {
  

    
}


<div class="row">
    <div class="col-8" style="color:white">
        <RadzenDataList WrapItems="false" AllowPaging="false" Data="@announcements" Count="@announcements.Count()" TItem="Announcement" Style="height:400px; overflow-y:scroll;">
            <Template Context="announcement">
                <MudCard Style="background-color:#13181b; color:aliceblue" @onclick="() => MarkAsRead(announcement)">
                    <MudCardContent>
                        @if (announcement.Importance)
                        {
                            @*<MudBadge Dot="false" Color="Color.Error" Icon="@Icons.Material.TwoTone.ErrorOutline" Class="my-auto" Origin="Origin.TopLeft" Visible="!announcement.IsRead">
                                <MudText><b>@announcement.Message</b></MudText>
                            </MudBadge>*@
                        }
                        else
                        {
                            @*<MudBadge Dot="true" Color="Color.Success" Class="my-auto" Origin="Origin.TopLeft" Visible="!announcement.IsRead">
                                <MudText><b>@announcement.Message</b></MudText>
                            </MudBadge>*@
                        }
                        <MudText Typo="Typo.body2">@announcement.Message</MudText>
                    </MudCardContent>
                </MudCard>
            </Template>
        </RadzenDataList>

        @code
        {
            private void MarkAsRead(Announcement announcement)
            {
                string userId = "your_user_id";
                AnnouncementService.MarkAsRead(announcement.AnnouncementsId, userId);
               @* announcement.IsRead = true;*@
            }
        }
    </div>
</div>


<div>


        <div class="col-4" style="color: white">

        <MudCarousel Class="mud-width-full" @ref="_carouselTeachers" ItemsSource="@_sourceTeachers" @bind-SelectedIndex="selectedIndexTeachers" Style="height:400px; background-color:#000901; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column justify-center" style="height:100%">

                    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#000901">
                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                            <MudAvatar Style="height:100px; width:100px">@myContext.FirstName.First()@myContext.LastName.First()</MudAvatar>
                            <RadzenStack Gap="0" Style="align-self:center">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Teacher</b></RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@myContext.FirstName @myContext.LastName</b></RadzenText>
                                @*<RadzenText TextStyle="TextStyle.Body2">@myContext.Department</RadzenText>*@
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
                            <RadzenRow RowGap="0">
                                <RadzenColumn SizeXS="8">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Email</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" style="color:dodgerblue">@myContext.Aspnetusers.Email</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Modules</RadzenText>
                                    @*<RadzenText TextStyle="TextStyle.Body1">@myContext.Modules</RadzenText>*@
                                </RadzenColumn>
                                <RadzenColumn SizeXS="4">
                                    <RadzenButton Variant="Radzen.Variant.Text" Text="Email" Size="ButtonSize.Small" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Text="Live Chat" Size="ButtonSize.Small" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                        <br />
                        <br />
                    </RadzenCard>
                </div>
            </ItemTemplate>
        </MudCarousel>
        </div>

   

            @code {
             }

        </div>
    <body>
        <AuthorizeView>
            <Authorized>
                <div>
                    
                </div>
            </Authorized>
            <NotAuthorized>
                Page not available!
            </NotAuthorized>
        </AuthorizeView>
    </body>
