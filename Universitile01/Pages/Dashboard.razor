@page "/Dashboard"
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService

<PageTitle>Dashboard</PageTitle>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300i,400" rel="stylesheet">
</head>

<body>
    <div class="row">
        <AuthorizeView>
            <Authorized>
				<div class="col-8">
					<RadzenScheduler Data="@events" TItem="CalendarEvent" StartProperty="Start" EndProperty="End" TextProperty="Title" AppointmentSelect=@OpenDialogCalendar>
						<RadzenDayView />
						<RadzenWeekView />
						<RadzenMonthView />
						<RadzenYearView />
					</RadzenScheduler>
					@code
					{
		                private List<CalendarEvent> events = new List<CalendarEvent>()
					    {
					        new CalendarEvent("Exams", "Exams for spring", DateTime.Parse("12/05/2023"), DateTime.Parse("20/05/2023")),
					        new CalendarEvent("Graduation", "Summer Graduation", DateTime.Parse("12/06/2023"), DateTime.Parse("14/06/2023")),
					        new CalendarEvent("Enrollment", "Enrollment for the academic year 2023-2024", DateTime.Parse("01/07/2023"), DateTime.Parse("31/08/2023")),
					        new CalendarEvent("Re-examination", "Re-examination for those who failed to pass some of their classes", DateTime.Parse("10/08/2023"), DateTime.Parse("10/09/2023"))
					    };

		                private void OpenDialogCalendar(SchedulerAppointmentSelectEventArgs<CalendarEvent> args)
		                {
		                    var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
		                    var parameters = new DialogParameters();
		                    parameters.Add("ContentText", args.Data.Description);
		                    DialogService.Show<CalendarDialog>(args.Data.Title, parameters, options);
		                }
					}
				</div>
            </Authorized>
            <NotAuthorized>
                It's working!
            </NotAuthorized>
        </AuthorizeView>
        

        <div class="col-4" style="color: white">

            <MudCarousel Class="mud-width-full" @ref="_carouselModule" ItemsSource="@_sourceModule" @bind-SelectedIndex="selectedIndexModule" Style="height:400px; background-color:#12080c; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false">
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                        
                        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#12080c">
                            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                                <RadzenStack Gap="0" Style="align-self:center">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Module</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@context.Name</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@context.Teachers</RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                            <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
                                <RadzenRow RowGap="0">
                                    <RadzenColumn SizeXS="8">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">School</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">@context.School</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Direction</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">@context.Direction</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn SizeXS="4">
                                        <RadzenButton Variant="Radzen.Variant.Text" Text="Go to module's page'" Size="ButtonSize.Medium"/>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenCard>
                            <br />
                            <br />
                        </RadzenCard>

                    </div>
                </ItemTemplate>
            </MudCarousel>

            @code {
                private MudCarousel<Module> _carouselModule;
                private IList<Module> _sourceModule = new List<Module>()
                {
                    new Module("Graphics 1", "Computer Science", "Computer Science", "Grigorios Kalogiannis"),
                    new Module("Application Development", "Computer Science", "Computer Science", "Andreas Plageras"),
                    new Module("Networks and Security", "Computer Science", "Computer Science", "Andreas Plageras"),
                    new Module("Team Project", "Computer Science", "Computer Science", "Ioannis Masmanidis"),
                    new Module("Ethical Hacking", "Computer Science", "Networks and Security", "Vasileios Memos"),
                    new Module("English", "Computer Science, Business, Psychology", "-", "Iren Hovanishian, Vicky Zdoukopoulou")
                };
                private int selectedIndexModule = 0;
            }

        </div>

    </div>

    <div class="row">

        <div class="col-8" style="color:white">

            <RadzenDataList WrapItems="false" AllowPaging="false" Data="@announcements" Count="@announcements.Count()" TItem="Announcement" Style="height:400px; overflow-y:scroll;">
                <Template Context="announcement">
                    <MudCard Style="background-color:#13181b; color:aliceblue">
                        <MudCardContent>
                            @if (announcement.Importance)
                            {
                                <MudBadge Dot="false" Color="Color.Error" Icon="@Icons.Material.TwoTone.ErrorOutline" Class="my-auto" Origin="Origin.TopLeft" Visible="@announcement.IsNotRead">
                                    <MudText><b>@announcement.Title</b></MudText>
                                </MudBadge>
                            }
                            else
                            {
                                <MudBadge Dot="true" Color="Color.Success" Class="my-auto" Origin="Origin.TopLeft" Visible="@announcement.IsNotRead">
                                    <MudText><b>@announcement.Title</b></MudText>
                                </MudBadge>
                            }
                            <MudText Typo="Typo.body2" >@announcement.Description</MudText>
                        </MudCardContent>
                    </MudCard>                    
                </Template>
            </RadzenDataList>

            @code
            {
                List<Announcement> announcements = new List<Announcement>
                {
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   true,   true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   true,   true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   true,   true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  false),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true),
                    new Announcement("Debate about the impact of AI on people.", "There is a debate between the schools of Computer Science and Psychology, which will take place on 20/04/23.", "10/04/23", "Computer Science, Psychology", "Computer Science, Networks and Security, Game Development",   false,  true)
                };

                private void OpenDialogList(SchedulerAppointmentSelectEventArgs<CalendarEvent> args)
                {
                    var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
                    var parameters = new DialogParameters();
                    parameters.Add("ContentText", args.Data.Description);
                    DialogService.Show<CalendarDialog>(args.Data.Title, parameters, options);
                }

                private void isread(Announcement announcement)
                {
                    announcement.IsNotRead = false;
                }
            }

        </div>

        <div class="col-4" style="color: white">

            <MudCarousel Class="mud-width-full" @ref="_carouselTeachers" ItemsSource="@_sourceTeachers" @bind-SelectedIndex="selectedIndexTeachers" Style="height:400px; background-color:#000901; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false">
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" style="height:100%">

                        <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#000901">
                            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                                <MudAvatar Style="height:100px; width:100px">@context.Name.First()@context.Surname.First()</MudAvatar>
                                <RadzenStack Gap="0" Style="align-self:center">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Teacher</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@context.Name @context.Surname</b></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@context.Department</RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                            <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
                                <RadzenRow RowGap="0">
                                    <RadzenColumn SizeXS="8">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Email</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" style="color:dodgerblue">@context.Email</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Modules</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">@context.Modules</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn SizeXS="4">
                                        <RadzenButton Variant="Radzen.Variant.Text" Text="Email" Size="ButtonSize.Small" />
                                        <RadzenButton Variant="Radzen.Variant.Text" Text="Live Chat" Size="ButtonSize.Small" />
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenCard>
                            <br />
                            <br />
                        </RadzenCard>

                    </div>
                </ItemTemplate>
            </MudCarousel>

            @code {
                private MudCarousel<Teacher> _carouselTeachers;
                private IList<Teacher> _sourceTeachers = new List<Teacher>()
            {
            new Teacher("Ioannis", "Masmanidis", "Databases, Team Project", "Computer Science", "io.masmanidis@mc-class.gr", "6969696969"),
            new Teacher("Alexandros", "Berberis", "Introduction to Computer Science, Foundations of Computer Science", "Computer Science", "al.berberis@mc-class.gr", "1111111111"),
            new Teacher("Grigorios", "Kalogiannis", "Graphics 1", "Computer Science", "g.kalogiannis@mc-class.gr", "2222222222"),
            new Teacher("Iren", "Hovanishian", "English", "English", "i.hovanishian@mc-class.gr", "3333333333"),
            new Teacher("Kostas", "Karaklas", "Programming 1, Programming 2", "Computer Science", "k.karaklas@mc-class.gr", "444444444"),
            new Teacher("Vasileios", "Memos", "Software Engineering", "Computer Science", "vas.memos@mc-class.gr", "555555555")
            };
                private int selectedIndexTeachers = 0;
            }

        </div>

    </div>

</body>